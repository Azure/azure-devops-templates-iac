parameters:
  - name: environments
    displayName: "Name of the environments where to deploy the resources. The environments needs to have the same name as the Azure DevOps environments."
    type: object
    default:
      - build
      - dev
  - name: moduleDependencies
    displayName: "List of bicep modules to include in artifact."
    type: object
    default:
      - "Microsoft.Network/virtualNetworks"
      - "Microsoft.Network/privateEndpoints"
      - "Microsoft.KeyVault/vaults"
      - "Microsoft.Resources/tags"

resources:
  repositories:
    - repository: azure-devops-templates-iac
      name: "#{ProjectName}#/azure-devops-templates-iac"
      type: git
      ref: refs/tags/1.0.0
    - repository: ResourceModules
      name: Azure/ResourceModules
      type: github
      endpoint: "#{GitHubEndpoint}#"
      ref: refs/tags/v0.7.0

trigger: none

pool:
  vmImage: "ubuntu-22.04"

variables:
  artifactName: "$(Build.Repository.Name)-$(Build.BuildNumber)"
  validationConnectedServiceNameARM: "#{ARMServiceConnectedName}#"
  validationDockerRegistryServiceConnection: "#{DockerServiceConnectedName}#"
  buildConnectedServiceNameARM: "#{ARMServiceConnectedName}#"
  devConnectedServiceNameARM: "#{ARMServiceConnectedName}#"

stages:
  - stage: createValidateArtifact
    displayName: "Create and Validate Artifact"
    variables:
      dockerfileDirectoryPath: "$(Build.StagingDirectory)"
      connectedServiceNameARM: "$(validationConnectedServiceNameARM)"
      dockerPreCommitImageName: "docker-pre-commit"
      dockerPreCommitImageTag: "main"
      dockerPreCommitRegistry: "$(dockerRegistryServiceConnection).azurecr.io"
      dockerRegistryServiceConnection: "$(validationDockerRegistryServiceConnection)"
    jobs:
      - job: createBuildArtifact
        displayName: "Create pipeline artifact"
        steps:
          - checkout: self
          - checkout: ResourceModules
          - ${{ each module in parameters.moduleDependencies }}:
              - template: steps/bicep/initialize-bicep-dependencies.yaml@azure-devops-templates-iac
                parameters:
                  moduleName: "${{ module }}"
                  sourceDirectory: "$(Build.SourcesDirectory)/ResourceModules/modules/${{ module }}"
                  destinationDirectory: "$(Build.ArtifactStagingDirectory)/modules/${{ module }}"
          - template: steps/tools/create-build-artifact.yaml@azure-devops-templates-iac
            parameters:
              sourceDirectory: "$(Build.SourcesDirectory)/$(Build.Repository.Name)/"
              artifactDirectory: "$(Build.ArtifactStagingDirectory)"
              artifactName: "$(artifactName)"
      - job: runBicepBuild
        displayName: "Run Bicep build on code"
        dependsOn: createBuildArtifact
        workspace:
          clean: all
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: "$(artifactName)"
              downloadPath: "$(System.ArtifactsDirectory)"
          - template: steps/bicep/run-azure-bicep-build.yaml@azure-devops-templates-iac
            parameters:
              environment: "validation"
              connectedServiceNameARM: "${{ variables.connectedServiceNameARM }}"
              workingDirectoryPath: "$(System.ArtifactsDirectory)/$(artifactName)/"
              templateFilePath: "$(System.ArtifactsDirectory)/$(artifactName)/main.bicep"
      - job: runPreCommit
        displayName: "Run pre-commit on the code"
        dependsOn: createBuildArtifact
        workspace:
          clean: all
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: "$(artifactName)"
              downloadPath: "$(System.ArtifactsDirectory)"
          - template: steps/codequality/run-pre-commit.yaml@azure-devops-templates-iac
            parameters:
              workingDirectoryPath: "$(System.ArtifactsDirectory)/$(artifactName)"
              enableGitInitialization: "true"
              enableDockerRegistryLoginLogout: "true"
              dockerRegistryServiceConnection: "${{ variables.dockerRegistryServiceConnection }}"
              dockerPreCommitImageName: "$(dockerPreCommitImageName)"
              dockerPreCommitImageTag: "$(dockerPreCommitImageTag)"
              dockerPreCommitRegistry: "$(dockerPreCommitRegistry)"
      - job: runPSRule
        displayName: "Run PSRule on the code"
        dependsOn: createBuildArtifact
        workspace:
          clean: all
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: "$(artifactName)"
              downloadPath: "$(System.ArtifactsDirectory)"
          - template: steps/codequality/run-psrule.yaml@azure-devops-templates-iac
            parameters:
              connectedServiceNameARM: "${{ variables.connectedServiceNameARM }}"
              workingDirectoryPath: "$(System.ArtifactsDirectory)/$(artifactName)/"
              psRuleModules: "PSRule.Rules.Azure"
              configurationFilePath: "ps-rule.yaml"
              inputFiles: "*.bicep"

  - ${{ each environment in parameters.environments }}:
      - stage: deployBicep_${{ environment }}
        displayName: "Deployment ${{ environment }}"
        ${{ if eq(environment, 'build') }}:
          dependsOn: createValidateArtifact
        ${{ if eq(environment, 'dev') }}:
          dependsOn: deployBicep_build
        variables:
          - ${{ if eq(environment, 'build') }}:
              - name: connectedServiceNameARM
                value: $(buildConnectedServiceNameARM)
          - ${{ if eq(environment, 'dev') }}:
              - name: connectedServiceNameARM
                value: $(devConnectedServiceNameARM)
          - group: "${{ environment }}-bicep"
        jobs:
          - deployment: deployBicep_${{ environment }}
            displayName: "${{ environment }} - Deploy Bicep deployment"
            environment: ${{ environment }}
            workspace:
              clean: all
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: none
                    - task: DownloadBuildArtifacts@0
                      inputs:
                        artifactName: "$(artifactName)"
                        downloadPath: "$(System.ArtifactsDirectory)"
                    - template: steps/bicep/run-azure-bicep-deployment.yaml@azure-devops-templates-iac
                      parameters:
                        environment: "${{ environment }}"
                        connectedServiceNameARM: "${{ variables.connectedServiceNameARM }}"
                        workingDirectoryPath: "$(System.ArtifactsDirectory)/$(artifactName)"
                        deploymentScope: "resourcegroup"
                        deploymentMode: "incremental"
                        templateFilePath: "$(System.ArtifactsDirectory)/$(artifactName)/main.bicep"
                        templateParametersFilePath: "$(System.ArtifactsDirectory)/$(artifactName)/$(parameterFileName)"
                        targetResourceGroupName: "$(resourceGroupNamePrefix)${{ environment }}$(Build.BuildId)"
                        targetLocation: "$(resourceGroupLocation)"
                        deploymentName: "${{ environment }}$(Build.BuildId)"
                        deploymentOutputsVariableName: "${{ environment }}outputs"
                        enableDestroyBicepResourceGroupDeployment: "true"
                    - task: AzureCLI@2
                      name: displayOutputs
                      displayName: "Display outputs from Bicep deployment"
                      inputs:
                        azureSubscription: "${{ variables.connectedServiceNameARM }}"
                        scriptLocation: inlineScript
                        scriptType: pscore
                        workingDirectory: "$(System.ArtifactsDirectory)/$(artifactName)"
                        inlineScript: |
                          '$(${{ environment }}outputs)'
