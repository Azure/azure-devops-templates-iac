parameters:
  - name: "environment"
    displayName: "(String) Name of the environment where the resource will be deployed."
    type: string
    default: "test"
  - name: "connectedServiceNameARM"
    displayName: "(String) Name of the DevOps Service Connection to use."
    type: string
  - name: "workingDirectoryPath"
    displayName: "(String) Path of the working directory. Should be the directory with Terraform code."
    type: string
    default: "$(System.DefaultWorkingDirectory)"
  - name: enableTerraformRemoteBackend
    displayName: "(String) Text boolean defining if the use of a remote backend should be enabled. Should be set to true if used in non-ephemeral environment."
    type: string
    default: "false"
  - name: "terraformStateConnectedServiceNameARM"
    displayName: "(String) Name of the Service Connection of the SP that have access to the storage account dedicated to states and plan files."
    type: string
    default: "state"
  - name: "terraformStateResourceGroupName"
    displayName: "(String) Name of the resource group containing the storage account dedicated to states and plan files."
    type: string
    default: "rg1"
  - name: "terraformStateStorageAccountName"
    displayName: "(String) Name of the storage account dedicated to states and plan files."
    type: string
    default: "storageaccount1"
  - name: "terraformStateBlobContainerName"
    displayName: "(String) Name of the blob container that will host the state file."
    type: string
    default: "statecontainer"
  - name: "terraformStatefileName"
    displayName: "(String) Name of the blob state file."
    type: string
    default: "blob.tfstate"
  - name: enableTerraformPlanUpload
    displayName: "(String) Text boolean defining if the plan file needs to be uploaded to the storage account to be reused later (ex: after manual validation)."
    type: string
    default: "false"
  - name: "terraformPlanBlobContainerName"
    displayName: "(String) Name of the blob container that will host the plan file."
    type: string
    default: "plancontainer"
  - name: "terraformPlanfileName"
    displayName: "(String) Name of the blob plan file."
    type: string
    default: "tfplan_buildid.tfplan"
  - name: "terraformParametersFilePath"
    displayName: "(String) Path to the JSON or HCL Terraform Parameter file for the deployment."
    type: string
    default: ""
  - name: enableTerraformApplyLocal
    displayName: "(String) Text boolean defining if the apply part of the pipeline should be enabled."
    type: string
    default: "false"
  - name: enableTerraformApplyRemote
    displayName: "(String) Text boolean defining if a plan file saved previously should be deployed. "
    type: string
    default: "false"
  - name: enableTerraformApplyDestroy
    displayName: "(String) Text boolean defining if a currently deployed infrastructure needs to be deleted."
    type: string
    default: "false"

steps:
  - task: AzureCLI@2
    name: setSPNVariables_${{ parameters.environment }}
    displayName: "Set service principal connection information as variables"
    inputs:
      azureSubscription: ${{ parameters.connectedServiceNameARM  }}
      scriptLocation: inlineScript
      scriptType: pscore
      workingDirectory: ${{ parameters.workingDirectoryPath }}
      addSpnToEnvironment: true
      inlineScript: |
        $subscriptionId="$(az account list --query "[?isDefault].id" -o tsv)"
        Write-Host "##vso[task.setvariable variable=armClientId]$($env:servicePrincipalId)"
        Write-Host "##vso[task.setvariable variable=armClientSecret]$($env:servicePrincipalKey)"
        Write-Host "##vso[task.setvariable variable=armSubscriptionId]$subscriptionId"
        Write-Host "##vso[task.setvariable variable=armTenantId]$($env:tenantId)"

  - ${{ if eq(parameters.enableTerraformRemoteBackend, 'true') }}:
      - task: AzureCLI@2
        name: terraformInitRemote_${{ parameters.environment }}
        displayName: "Terraform Init - Remote Backend"
        inputs:
          azureSubscription: ${{ parameters.connectedServiceNameARM  }}
          scriptLocation: inlineScript
          scriptType: pscore
          workingDirectory: ${{ parameters.workingDirectoryPath }}
          inlineScript: |
            $env:ARM_CLIENT_ID="$(armClientId)"
            $env:ARM_CLIENT_SECRET="$(armClientSecret)"
            $env:ARM_SUBSCRIPTION_ID="$(armSubscriptionId)"
            $env:ARM_TENANT_ID="$(armTenantId)"

            terraform init -backend-config='resource_group_name=${{ parameters.terraformStateResourceGroupName }}' -backend-config='storage_account_name=${{ parameters.terraformStateStorageAccountName }}' -backend-config='container_name=${{ parameters.terraformStateBlobContainerName }}' -backend-config='key=${{ parameters.terraformStatefileName }}' -input=false

  - ${{ if eq(parameters.enableTerraformRemoteBackend, 'false') }}:
      - task: AzureCLI@2
        name: terraformInitLocalBackend_${{ parameters.environment }}
        displayName: "Terraform Init - Local Backend"
        inputs:
          azureSubscription: ${{ parameters.connectedServiceNameARM  }}
          scriptLocation: inlineScript
          scriptType: pscore
          workingDirectory: ${{ parameters.workingDirectoryPath }}
          inlineScript: |
            $env:ARM_CLIENT_ID="$(armClientId)"
            $env:ARM_CLIENT_SECRET="$(armClientSecret)"
            $env:ARM_SUBSCRIPTION_ID="$(armSubscriptionId)"
            $env:ARM_TENANT_ID="$(armTenantId)"

            terraform init -input=false

  - task: AzureCLI@2
    name: terraformPlan_${{ parameters.environment }}
    displayName: "Terraform Plan"
    inputs:
      azureSubscription: ${{ parameters.connectedServiceNameARM  }}
      scriptLocation: inlineScript
      scriptType: pscore
      workingDirectory: ${{ parameters.workingDirectoryPath }}
      inlineScript: |
        $env:ARM_CLIENT_ID="$(armClientId)"
        $env:ARM_CLIENT_SECRET="$(armClientSecret)"
        $env:ARM_SUBSCRIPTION_ID="$(armSubscriptionId)"
        $env:ARM_TENANT_ID="$(armTenantId)"

        if( "" -eq "${{ parameters.terraformParametersFilePath }}" ){
          terraform plan -out ./${{ parameters.terraformPlanFileName }} -no-color
        }
        else{
          terraform plan -var-file='${{ parameters.terraformParametersFilePath }}'  -out ./${{ parameters.terraformPlanFileName }} -no-color
        }
  - ${{ if eq(parameters.enableTerraformPlanUpload, 'true') }}:
      - task: AzureCLI@2
        name: terraformPlanUpload_${{ parameters.environment }}
        displayName: "Upload Terraform Plan to storage account"
        inputs:
          azureSubscription: ${{ parameters.connectedServiceNameARM  }}
          scriptLocation: inlineScript
          scriptType: pscore
          workingDirectory: ${{ parameters.workingDirectoryPath }}
          inlineScript: |
            az storage blob upload --account-name ${{ parameters.terraformStateStorageAccountName }} -n ${{ parameters.terraformPlanFileName }} -f ./${{ parameters.terraformPlanFileName }} -c ${{ parameters.terraformPlanBlobContainerName }}
            Remove-Item ./${{ parameters.terraformPlanFileName }} -Force

  - ${{ if eq(parameters.enableTerraformApplyLocal, 'true') }}:
      - task: AzureCLI@2
        name: terraformApplyCurrentPlan_${{ parameters.environment }}
        displayName: "Terraform Apply - Local Plan"
        inputs:
          azureSubscription: ${{ parameters.connectedServiceNameARM  }}
          scriptLocation: inlineScript
          scriptType: pscore
          workingDirectory: ${{ parameters.workingDirectoryPath }}
          inlineScript: |
            $env:ARM_CLIENT_ID="$(armClientId)"
            $env:ARM_CLIENT_SECRET="$(armClientSecret)"
            $env:ARM_SUBSCRIPTION_ID="$(armSubscriptionId)"
            $env:ARM_TENANT_ID="$(armTenantId)"

            terraform show ./${{ parameters.terraformPlanFileName }}

            terraform apply ./${{ parameters.terraformPlanFileName }} -no-color
  - ${{ if eq(parameters.enableTerraformApplyRemote, 'true') }}:
      - task: AzureCLI@2
        name: terraformApplyRemotePlan_${{ parameters.environment }}
        displayName: "Terraform Apply - Remote Plan"
        inputs:
          azureSubscription: ${{ parameters.connectedServiceNameARM  }}
          scriptLocation: inlineScript
          scriptType: pscore
          workingDirectory: ${{ parameters.workingDirectoryPath }}
          inlineScript: |
            $env:ARM_CLIENT_ID="$(armClientId)"
            $env:ARM_CLIENT_SECRET="$(armClientSecret)"
            $env:ARM_SUBSCRIPTION_ID="$(armSubscriptionId)"
            $env:ARM_TENANT_ID="$(armTenantId)"

            az storage blob download --account-name ${{ parameters.terraformStateStorageAccountName }} -f ./${{ parameters.terraformPlanFileName }} -c ${{ parameters.terraformPlanBlobContainerName }} -n ${{ parameters.terraformPlanFileName }}
            az storage blob delete  --account-name ${{ parameters.terraformStateStorageAccountName }} -c ${{ parameters.terraformPlanBlobContainerName }} -n ${{ parameters.terraformPlanFileName }}

            terraform show ./${{ parameters.terraformPlanFileName }}

            terraform apply ./${{ parameters.terraformPlanFileName }} -no-color
  - ${{ if eq(parameters.enableTerraformApplyDestroy, 'true') }}:
      - task: AzureCLI@2
        name: terraformDestroy_${{ parameters.environment }}
        displayName: "Terraform Destroy"
        inputs:
          azureSubscription: ${{ parameters.connectedServiceNameARM  }}
          scriptLocation: inlineScript
          scriptType: pscore
          workingDirectory: ${{ parameters.workingDirectoryPath }}
          inlineScript: |
            $env:ARM_CLIENT_ID="$(armClientId)"
            $env:ARM_CLIENT_SECRET="$(armClientSecret)"
            $env:ARM_SUBSCRIPTION_ID="$(armSubscriptionId)"
            $env:ARM_TENANT_ID="$(armTenantId)"
            if( "" -eq "${{ parameters.terraformParametersFilePath }}" ){
              terraform apply -destroy -auto-approve -no-color -input=false
            }
            else{
              terraform apply -destroy -var-file='${{ parameters.terraformParametersFilePath }}' -auto-approve -no-color -input=false
            }
